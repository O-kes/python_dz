# def my_func(str):
#     print(str)
# # my_func('привет')
#     return True
#
# rezult = my_func('привет')
# print(rezult)


# Создать функцию calc(a, b, operation). Описание
# входных параметров:
# 1) Первое число
# 2) Второе число
# 3) Действие над ними:
# 1. * Сложить 2. - Вычесть
# з. * УмножИТЬ
# 4. / Разделить 5. В остальных случаях функция должна
# возвращать "Операция не поддерживается".
# a = int(input('введите число'))
# b = int(input('введите число'))
# def my_calc(a, b, operation):
#     if operation == '+':
#         return a+b
#     elif operation == '-':
#         return a-b
#     elif operation == '*':
#         return a*b
#     elif operation == '/':
#         return a/b
#     else:
#         return "Операция не поддерживается"
# print(my_calc(a, b,'+'))
# print(my_calc(30, 15,'-'))
# print(my_calc(a, b,'*'))
# print(my_calc(30, 15,'/'))

# Напишите программу, которая будет выводить нечётные числа из списка и остановится, если
# встретит число 139.
# def my_func(num):
#     return num % 2 == 0
#
# lst = [98,88,65,21,139,68]
# for number in lst:
#     if number == 139:
#         break
#     if not my_func(number):
#
#         print(number)

# def hypot(x,y):
#     return (x**2+y**2)**0.5
# z = hypot(3,4)
# print(z)

# def privet(age,name):
#     print("Приветствуем нашего нового участника!!!",name,'ей',age,'лет')
#
# privet(name= 'Настя',age='25')

# def privet(name, age):
#     print("Приветствуем нашего нового участника!!!",name,'ей',age,'лет')
#
# privet('25','Настя')

# privet('Елена')
# privet('Екатерина')
# privet('Ира')
# privet('Виктория')

# def privet(name,age= 'много лет'):
#     print("Приветствуем нашего нового участника!!!",name,'ей',age,'лет')
#
# privet('Настя')
# Приветствуем нашего нового участника!!! Настя ей много лет лет

# name_a='Настя'
# age_a = '25'
# def privet(name,age= 'много лет'):
#     print("Приветствуем нашего нового участника!!!",name,'ей',age,'лет')

# privet(name_a,age_a)
# Приветствуем нашего нового участника!!! Настя ей 25 лет

# a = int(input('Введите сторону квадрата'))
# def s_k(a):
#     return a*a
# print(s_k(a))
# Введите сторону квадрата2
# 4

# def s_k(a):
#     return a*a
# print(s_k(7))
# 49

# def s_k(a):
#     return a*a
# print('Сторона квадрата =',s_k(a = int(input('Введите сторону квадрата:'))))
# Введите сторону квадрата:2
# Сторона квадрата = 4

# a = int(input('Введите начало диапазона:'))
# b = int(input('Введите конец диапазона:'))
# def my_func(a, b):
#     for i in range(a, b):
#         if i % 2 == 1:
#             print(i)
# my_func(a,b) # вызвать функцию для показа результата

# Введите начало диапазона:2
# Введите конец диапазона:9
# 3
# 5
# 7
Простейшие арифметические операции (1)
Написать функцию arithmetic, принимающую 3 аргумента: первые 2 - числа, третий - операция, которая должна быть произведена над ними. Если третий аргумент +, сложить их; если —, то вычесть; * — умножить; / — разделить (первое на второе). В остальных случаях вернуть строку "Неизвестная операция".
Високосный год (2)
Написать функцию is_year_leap, принимающую 1 аргумент — год, и возвращающую True, если год високосный, и False иначе.
Квадрат (3)
Написать функцию square, принимающую 1 аргумент — сторону квадрата, и возвращающую 3 значения (с помощью кортежа): периметр квадрата, площадь квадрата и диагональ квадрата.
Времена года (4)
Написать функцию season, принимающую 1 аргумент — номер месяца (от 1 до 12), и возвращающую время года, которому этот месяц принадлежит (зима, весна, лето или осень).
Банковский вклад (5)
Пользователь делает вклад в размере a рублей сроком на years лет под 10% годовых (каждый год размер его вклада увеличивается на 10%. Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже будут проценты).

Написать функцию bank, принимающая аргументы a и years, и возвращающую сумму, которая будет на счету пользователя.
Простые числа (6)
Написать функцию is_prime, принимающую 1 аргумент — число от 0 до 1000, и возвращающую True, если оно простое, и False - иначе.
Правильная дата (7)
Написать функцию date, принимающую 3 аргумента — день, месяц и год. Вернуть True, если такая дата есть в нашем календаре, и False иначе.
XOR-шифрование (8)
Написать функцию XOR_cipher, принимающая 2 аргумента: строку, которую нужно зашифровать, и ключ шифрования, которая возвращает строку, зашифрованную путем применения функции XOR (^) над символами строки с ключом. Написать также функцию XOR_uncipher, которая по зашифрованной строке и ключу восстанавливает исходную строку.
